#!/bin/bash -e

###
  #           __                      __             __    _
  #    _____ / /_ _____ __  __ _____ / /_ ___   ____/ /   (_)____
  #   / ___// __// ___// / / // ___// __// _ \ / __  /   / // __ \
  #  (__  )/ /_ / /   / /_/ // /__ / /_ /  __// /_/ /_  / // /_/ /
  # /____/ \__//_/    \__,_/ \___/ \__/ \___/ \__,_/(_)/_/ \____/
  #
  # structed.io - masterless Puppet bootstraper
  # bootstraps new instances for nodeless Puppet
  #
  # normal installation: bash -c "$(curl -s http://con.structed.io/build)"
  # verbose installation: bash -c "$(curl http://con.structed.io/build)" -- -v
  #
  #
  # TODO:
  # - build in more exit-code checking
  # - verify debian support
  # - option to allow for changing puppet version
  #
  ##

### base config
TIMESTAMP=$(date -R)
PUPPET_DIR="${HOME}/.puppet"
PUPPET_LOCK="${PUPPET_DIR}/puppet-bootstrap.lock"
PUPPET_HOME="/etc/puppet"
FILE_PUPPET_APPLY="${PUPPET_DIR}/puppet-apply.sh"
FILE_PUPPET_RUN="${PUPPET_DIR}/puppet-run.sh"
FILE_PUPPET_UPDATE="${PUPPET_DIR}/puppet-update.sh"
FILE_CRONTAB="${PUPPET_DIR}/puppet-crontab.txt"
FILE_LOG="${PUPPET_DIR}/puppet-bootstrapper.log"
ARGS_CURL="-s"
ARGS_YUM="--assumeyes --quiet"

### ad-hoc config
while getopts "v" OPTION
do
  case ${OPTION} in
    v)
      ARGS_CURL="--verbose"

      ### required for RHEL, CentOS, Amazon Linux
      ARGS_YUM="--assumeyes"

      ### required for Ubuntu / Debian
      ARGS_APT="-y"
      ARGS_DPKG=""
        ;;
  esac
done
### end ad-hoc config


### convience function to echo and log with a single call
echolog()
{
  ### check if file exists, is writable and if not: touch it
  if [[ ! -f "${FILE_LOG}" ]]
  then
    touch "${FILE_LOG}"
  fi

  ### check if file is writable, if not, abort
  if [[ ! -w "${FILE_LOG}" ]]
  then
    echo "${1}"
    echo "[${HOSTNAME}] [$(date +'%Y-%m-%dT%H:%M:%S%z')] ${*}" >> "${FILE_LOG}"
  else
    echo "#####"
    echo -e "# You do not have write permissions for \e[0;31m${FILE_LOG}\e[00m, aborting."
    echo "#####"
    exit 1
  fi
}

### check for underlying distribution of OS
if [[ -f "/etc/redhat-release" ]]
  then
    BOOTSTRAP_DIST="redhat"
    OS_VERSION_MAJ=$(rpm -q --qf '%{VERSION}' "$(rpm -q --whatprovides redhat-release)")

    ### Puppet Labs has Major Version-based YUM packages available at https://yum.puppetlabs.com/
    PUPPET_REMOTE_URL="https://yum.puppetlabs.com"
    PUPPET_RPM="puppetlabs-release-el-${OS_VERSION_MAJ}.noarch.rpm"
    PUPPET_REMOTE_RPM="${PUPPET_REMOTE_URL}/${PUPPET_RPM}"

    ARGS_YUM="--assumeyes --quiet"

elif [[ -f "/etc/debian_version" ]]
  then
    ### figure out codename
    BOOTSTRAP_DIST_CODE=$(lsb_release --codename --short)

    ### Puppet Labs has codename-based DEB packages available at https://apt.puppetlabs.com/
    PUPPET_REMOTE_URL="https://apt.puppetlabs.com"
    PUPPET_DEB="puppetlabs-release-${BOOTSTRAP_DIST_CODE}.deb"
    PUPPET_REMOTE_DEB="${PUPPET_REMOTE_URL}/${PUPPET_RPM}"

    ### define distro
    BOOTSTRAP_DIST="debian"

    ARGS_APT="-y -qq"
    ARGS_DPKG="--quiet"

else
  echo "#####"
  echo -e "# Need to run this on \e[0;31mRHEL\e[00m, \e[0;31mCentOS\e[00m, \e[0;31mDebian\e[00m or \e[0;31mUbuntu\e[00m. Aborting."
  echo "#####"
fi


### check if script is being run as root; inspired by http://dcmnt.me/1KaHE3q
if [[ "${EUID}" -ne 0 ]]
then
  echo " "
  echo "#####"
  echo -e "# Need to be \e[0;31mroot\e[00m to run the bootstrapper. Aborting."
  echo "#####"
  echo " "
  exit 1

else
  ### continue if script has not been run before
  if [[ ! -f "${PUPPET_LOCK}" ]]
  then

    clear
    echo " "
    echo "#####"
    echo "# structed.io masterless Puppet bootstrapper"
    echo "#####"
    echo " "

    ### create working directory and switch to it
    mkdir -p "${PUPPET_DIR}"
    touch "${FILE_LOG}"

    ### this needs to appear after the mkdir, otherwise write perm check fails
    echolog "#1 - creating working directory and switching to it"

    cd "${PUPPET_DIR}"

    ### remove any installed versions of Puppet and Puppet Labs release RPM
    echolog "#2 - removing previously installed versions of Puppet"

    if [[ "${BOOTSTRAP_DIST}" == "redhat" ]]
      then
        yum "${ARGS_YUM}" remove puppet > "${FILE_LOG}" 2>&1
        yum "${ARGS_YUM}" remove puppetlabs-release > "${FILE_LOG}" 2>&1
    elif [[ "${BOOTSTRAP_DIST}" == "debian" ]]
      then
        apt-get "${ARGS_APT}" remove puppet > "${FILE_LOG}" 2>&1
        apt-get "${ARGS_APT}" remove puppetlabs-release > "${FILE_LOG}" 2>&1
    fi


    ### install package for Puppet Labs and clean package database
    echolog "#3 - installing Puppet Labs Release package"

    if [[ "${BOOTSTRAP_DIST}" == "redhat" ]]
      then
        ### download official RPM from Puppet Labs
        curl "${ARGS_CURL}" --remote-name "${PUPPET_REMOTE_RPM}" > /dev/null 2>&1

        ### update local repository cache
        yum "${ARGS_YUM}" install "${PUPPET_DIR}/${PUPPET_RPM}" > "${FILE_LOG}" 2>&1

        ### check if package is present
        ls -la "${PUPPET_DIR}/${PUPPET_RPM}" > /dev/null 2>&1

        # check exit code
        if [[ "${?}" -ne 0 ]]
          then
            # remove RPM
            rm -rf "${PUPPET_DIR:?}/${PUPPET_RPM}"
        fi

    elif [[ "${BOOTSTRAP_DIST}" == "debian" ]]
      then
        ### download official DEB from Puppet Labs
        curl "${ARGS_CURL}" --remote-name "${PUPPET_REMOTE_DEB}"

        ### install Puppet Labs repository
        dpkg "${ARGS_DPKG}" --install "${PUPPET_DEB}" > "${FILE_LOG}" 2>&1

        ### update local repository cache
        apt-get "${ARGS_APT}" update > "${FILE_LOG}" 2>&1

        ### check if package is present
        ls -la "${PUPPET_DIR}/${PUPPET_DEB}" > /dev/null 2>&1

        # check exit code
        if [[ "${?}" -ne 0 ]]
          then
            # remove DEB
            rm -rf "${PUPPET_DIR:?}/${PUPPET_DEB}"
        fi

    else
      echolog "Unsupported distribution detected. Aborting"
      exit 1
    fi


    ### install Puppet via package manager
    echolog "#4 - installing Puppet"

    if [[ "${BOOTSTRAP_DIST}" == "redhat" ]]
      then
        yum "${ARGS_YUM}" install puppet > "${FILE_LOG}" 2>&1
    elif [[ "${BOOTSTRAP_DIST}" == "debian" ]]
      then
        apt-get "${ARGS_APT}" install puppet
    fi

    ### install dependencies via Puppet
    echolog "#5 - installing core dependencies"

    if [[ "${BOOTSTRAP_DIST}" == "redhat" ]]
      then
        puppet apply --execute "package { 'crontabs': ensure => 'installed' }"
    elif [[ "${BOOTSTRAP_DIST}" == "debian" ]]
      then
        puppet apply --execute "package { 'cron': ensure => 'installed' }"
    fi


    ### check if repository have been previously set, see CONSTRUCT-11
    if [[ ! -z "${BOOTSTRAP_REPO}" ]]
    then
      echolog "#6 - Automatically setting repository details"
      echolog "BOOTSTRAP_REPO: ${BOOTSTRAP_REPO}"

      ### stop password from being logged in plain-text
      ###echolog "BOOTSTRAP_PASS: $(for a in `seq ${#BOOTSTRAP_PASS}`; do echo -n '*'; done)"
    else
      ### loop while input is empty or not previously set
      while [[ -z "${BOOTSTRAP_REPO}" ]]
      do
        echolog "#6 - What is the HTTP(s) location of your Puppet manifests?"
        echo "Acceptable format: http(s)://user:pass@structed.io/repository"
        read BOOTSTRAP_REPO
      done
    fi

    # detect repository type by looking at the last three characters of the
    # address; empty responses would indicate that this is not a git repo,
    # so default to svn instead
    BOOTSTRAP_TYPE="${BOOTSTRAP_REPO:${#BOOTSTRAP_REPO} - 3}"

    if [[ "${BOOTSTRAP_TYPE}" != "git" ]]
    then
      BOOTSTRAP_TYPE="subversion"
    fi


    ### install VCS tools
    echolog "#7 - installing VCS tools"

    ### use inline Puppet for better OS support, see CONSTRUCT-13, CONSTRUCT-14
    if [[ "${BOOTSTRAP_TYPE}" == "git" ]]
    then
      puppet apply --execute "package { 'git': ensure => 'installed' }"
    else
      puppet apply --execute "package { 'subversion': ensure => 'installed' }"
    fi

    ### create Puppet run scripts
    echolog "#8 - creating Puppet run scripts"

    ### check if  init script filename has been set or default to safe choice
    if [[ -z "${BOOTSTRAP_INIT}" ]]
    then
      BOOTSTRAP_INIT="init.pp"
    fi

    ### get rid of default Puppet directory
    rm -rf ${PUPPET_HOME:?}

    ### check out manifests and associated files, see CONSTRUCT-4
    if [[ "${BOOTSTRAP_TYPE}" == "git" ]]
    then
      ### get it all!
      git clone "${BOOTSTRAP_REPO}" "${PUPPET_HOME}"
      git pull
      git submodule init
      git submodule update
    else
      svn co "${BOOTSTRAP_REPO}" "${PUPPET_HOME}"
    fi

    ### write call for puppet apply file
    echo -n "puppet apply /etc/puppet/manifests/${BOOTSTRAP_INIT}" > "${FILE_PUPPET_APPLY}"

    ### write calls for puppet run file
    echo -e "sh ${FILE_PUPPET_UPDATE}" > "${FILE_PUPPET_RUN}"
    echo -e "sh ${FILE_PUPPET_APPLY}" >> "${FILE_PUPPET_RUN}"

    ### create crontab file and add it to crontab
    echolog "#9 - creating crontab"

    echo " " >> "${FILE_CRONTAB}"
    echo "# generated by puppet-bootstrapper on ${TIMESTAMP}" >> "${FILE_CRONTAB}"


    echo "*/30 * * * * && ${FILE_PUPPET_RUN} > /dev/null" > "${FILE_CRONTAB}"
    crontab -u "${USER}" "${FILE_CRONTAB}"


    echolog "#10 - run puppet for the first time"
    bash "${FILE_PUPPET_UPDATE}"
    bash "${FILE_PUPPET_APPLY}"


    ### create lockfile
    echolog "#11 - creating lockfile"
    echo -e "last run: ${TIMESTAMP}" > "${PUPPET_LOCK}"
    echo " "


  ### show warning if script has been run before
  else
    echo "#####"
    echolog "#${PUPPET_LOCK} has been found, aborting."
    echo "#####"
  fi # end if for PUPPET_LOCK
fi # end if for root check
